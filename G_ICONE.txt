Attribute VB_Name = "G_ICONE"
Option Explicit
'API functions
#If VBA7 Then
    'For 64 Bit Systems
    Private Declare PtrSafe Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As LongPtr
    Private Declare PtrSafe Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As LongPtr
    Private Declare PtrSafe Function SetWindowPos Lib "user32" (ByVal hwnd As Long, ByVal hWndInsertAfter As Long, ByVal X As Long, ByVal Y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As LongPtr
    Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    Private Declare PtrSafe Function GetActiveWindow Lib "user32.dll" () As LongPtr
    Private Declare PtrSafe Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As LongPtr
    Private Declare PtrSafe Function DrawMenuBar Lib "user32" (ByVal hwnd As Long) As LongPtr
    Private Declare PtrSafe Function ExtractIcon32 Lib "shell32.dll" Alias "ExtractIconA" (ByVal hInst As Long, ByVal lpszExeFileName As String, ByVal nIconIndex As Long) As LongPtr
    Private Declare PtrSafe Function GetActiveWindow32 Lib "user32" Alias "GetActiveWindow" () As Integer
    Private Declare PtrSafe Function SendMessage32 Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As LongPtr
#Else
    'For 32 Bit Systems
    Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
    Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetWindowPos Lib "user32" (ByVal hwnd As Long, ByVal hWndInsertAfter As Long, ByVal X As Long, ByVal Y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As LongPtr
    Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function GetActiveWindow Lib "user32.dll" () As Long
    Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
    Private Declare Function DrawMenuBar Lib "user32" (ByVal hwnd As Long) As Long
    Private Declare Function ExtractIcon32 Lib "shell32.dll" Alias "ExtractIconA" (ByVal hInst As Long, ByVal lpszExeFileName As String, ByVal nIconIndex As Long) As Long
    Private Declare Function GetActiveWindow32 Lib "user32" Alias "GetActiveWindow" () As Integer
    Private Declare Function SendMessage32 Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
#End If




  'Constants
Private Const SWP_NOMOVE = &H2
Private Const SWP_NOSIZE = &H1
Private Const GWL_EXSTYLE = (-20)
Private Const HWND_TOP = 0
Private Const SWP_NOACTIVATE = &H10
Private Const SWP_HIDEWINDOW = &H80
Private Const SWP_SHOWWINDOW = &H40
Private Const WS_EX_APPWINDOW = &H40000
Private Const GWL_STYLE = (-16)
Private Const WS_MINIMIZEBOX = &H20000
Private Const SWP_FRAMECHANGED = &H20
Private Const WM_SETICON = &H80
Private Const ICON_SMALL = 0&
Private Const ICON_BIG = 1&
Private Const WS_SYSMENU As Long = &H80000

Global hwnd2 As Long

 
Sub AddIcon()
     'Add an icon on the titlebar
    Dim hwnd As Long
    Dim lngRet As Long
    Dim hIcon As Long
    hIcon = CadastroUnidades.ImgIcon.Picture.Handle
    hwnd = FindWindow(vbNullString, CadastroUnidades.Caption)
    lngRet = SendMessage(hwnd, WM_SETICON, ICON_SMALL, ByVal hIcon)
    'lngRet = SendMessage(hWnd, WM_SETICON, ICON_BIG, ByVal hIcon)
    lngRet = DrawMenuBar(hwnd)
End Sub
 
Sub AddMinimiseButton()
    '//Add a Minimize button to Userform
    Dim hwnd As Long
    hwnd = GetActiveWindow
    Call SetWindowLong(hwnd, GWL_STYLE, GetWindowLong(hwnd, GWL_STYLE) Or WS_MINIMIZEBOX)
    Call SetWindowPos(hwnd, 0, 0, 0, 0, 0, SWP_FRAMECHANGED Or SWP_NOMOVE Or SWP_NOSIZE)
End Sub
 
 Sub AppTasklist(myForm)
  'Add this userform into the Task bar
  Dim WStyle As Long
  Dim Result As Long
  Dim hwnd As Long
    Application.Calculation = xlCalculationManual
    hwnd = FindWindow(vbNullString, myForm.Caption)
    WStyle = GetWindowLong(hwnd, GWL_STYLE)
    WStyle = WStyle Or WS_SYSMENU
    WStyle = WStyle Or WS_MINIMIZEBOX
    Result = SetWindowPos(hwnd, HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE Or SWP_NOSIZE Or SWP_NOACTIVATE Or SWP_HIDEWINDOW)
    SetWindowLong hwnd, GWL_STYLE, WStyle
    WStyle = GetWindowLong(hwnd, GWL_EXSTYLE)
    WStyle = WStyle Or WS_EX_APPWINDOW
    SetWindowLong hwnd, GWL_EXSTYLE, WStyle
    Result = SetWindowPos(hwnd, HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE Or SWP_NOSIZE Or SWP_NOACTIVATE Or SWP_HIDEWINDOW)
    Result = SetWindowPos(hwnd, HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE Or SWP_NOSIZE Or SWP_NOACTIVATE Or SWP_SHOWWINDOW)
    DrawMenuBar (hwnd)
    
    Dim myIcoFile As String

    '~~> Change this to the relevant icon file
    myIcoFile = Replace(ºDIRETORIO, "\BD", "") & "\CONFIGURAÇÕES\Icone.ico"
    ChangeExelIcon (ExtractIcon32(0, myIcoFile, 0))
End Sub
Sub AppTaskDelist(hwnd)
    Dim WStyle As Long
    Dim Result As Long
    Dim ºWB, ºWB_2 As Workbook
    Dim ºExcel As Excel.Application
    Dim ºARQUIVO As String
    Dim ºResposta As VbVarType
    Set ºWB = GetObject(LOC_BASE)
    Set ºExcel = ºWB.Parent
    'If ºWB.Sheets("CAPA").Range("A36").Value <> "V1.0.1" Then
        'hwnd2 = hwnd
        'Call Atualizar_launcher
    'Else
        WStyle = GetWindowLong(hwnd, GWL_EXSTYLE)
        WStyle = WStyle And Not WS_EX_APPWINDOW
        Application.WindowState = xlNormal
        Application.Height = 1
        Application.Width = 1
        Application.Top = 2000
        Result = SetWindowPos(hwnd, 1, 2000, 2000, 600, 600, _
        SWP_NOMOVE Or _
        SWP_NOSIZE Or _
        SWP_NOACTIVATE) ' Or SWP_HIDEWINDOW)
        Result = SetWindowLong(hwnd, GWL_EXSTYLE, WStyle)
    'End If
End Sub
Sub Atualizar_launcher()
    Dim WStyle As Long
    Dim Result As Long
    Dim ºWB, ºWB_2 As Workbook
    Dim ºExcel As Excel.Application
    Dim ºARQUIVO As String
    Dim ºResposta As VbVarType
    Set ºWB = GetObject(LOC_BASE)
    Set ºExcel = ºWB.Parent
    ºResposta = MsgBox("A Versão do Launcher V1.0.1 esta disponível!" & vbCrLf & vbCrLf & _
        "Notas da versão:" & vbCrLf & _
        "Corigido o erro ao copiar estudos" & vbCrLf & vbCrLf & _
        "Selecionar estudo com dois cliques" & vbCrLf & _
        "Prossiga para realizar o processo de atualização" & vbCrLf & vbCrLf & _
        "Podemos prossegir?", vbYesNo)
    If ºResposta = vbYes Then
        Application.Visible = False
        ºWB.Close False
        Application.Wait (Now + TimeValue("00:00:05"))
        On Error Resume Next
        On Error GoTo 0
        FileCopy Replace(ºDIRETORIO, "\BD", "\Viabilidade Cyrela Launcher V1.0.xlsb"), Replace(LOC_BASE, Dir(LOC_BASE), "") & "Viabilidade Cyrela Launcher V1.0.1.xlsb"
        MsgBox "Atualizado com sucesso,apague o arquivo antigo e reinicie o sistema :-D"
        Result = SetWindowPos(hwnd2, 0, 0, 0, 0, 0, SWP_NOMOVE Or SWP_NOSIZE Or SWP_NOACTIVATE Or SWP_HIDEWINDOW)
        ThisWorkbook.Close False
    ElseIf ºResposta = vbNo Then
        MsgBox "Sistema não atualizado ¯\_(""/)_/¯"
        WStyle = GetWindowLong(hwnd2, GWL_EXSTYLE)
        WStyle = WStyle And Not WS_EX_APPWINDOW
        Application.WindowState = xlNormal
        Application.Height = 1
        Application.Width = 1
        Application.Top = 2000
        Result = SetWindowPos(hwnd2, 1, 2000, 2000, 600, 600, _
        SWP_NOMOVE Or _
        SWP_NOSIZE Or _
        SWP_NOACTIVATE)
        Result = SetWindowLong(hwnd2, GWL_EXSTYLE, WStyle)
    End If
End Sub

